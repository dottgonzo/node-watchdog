"use strict";
var Promise = require('bluebird');
var fs = require('fs');
var systemd_services_1 = require('systemd-services');
var ns = new systemd_services_1.default();
var watchDog = (function () {
    function watchDog(o) {
        if (o)
            this.configure(o);
    }
    watchDog.prototype.configure = function (o) {
        var _this = this;
        if (!o) {
            throw Error('no configuration provided for watchdog');
        }
        else {
            if (!o.configFile)
                o.configFile = '/etc/watchdog.conf';
            _this.configFile = o.configFile;
            var conf = 'realtime = yes\n';
            conf += 'priority = 1\n';
            if (o.pings) {
                for (var i = 0; i < o.pings.length; i++) {
                    conf += 'ping = ' + o.pings[i] + '\n';
                }
            }
            if (o.files) {
                for (var i = 0; i < o.files.length; i++) {
                    if (o.files[i].name && o.files[i].change) {
                        conf += 'file = ' + o.files[i].name + '\n';
                        conf += 'change = ' + o.files[i].change + '\n';
                    }
                    else {
                        throw Error('you must specify filename and change timer');
                    }
                }
            }
            if (o.pidFile) {
                conf += 'pidfile = ' + o.pidFile + '\n';
            }
            if (o.repairBinary) {
                conf += 'repair-binary = ' + o.repairBinary + '\n';
            }
            fs.writeFileSync(_this.configFile, conf, { encoding: 'utf-8' });
        }
    };
    watchDog.prototype.start = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            ns.start('watchdog').then(function (a) {
                resolve(a);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    watchDog.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            ns.stop('watchdog').then(function (a) {
                resolve(a);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    watchDog.prototype.restart = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.stop().then(function () {
                _this.start().then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }).catch(function (err) {
                _this.start().then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            });
        });
    };
    return watchDog;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = watchDog;

//# sourceMappingURL=data:application/json;base64,
